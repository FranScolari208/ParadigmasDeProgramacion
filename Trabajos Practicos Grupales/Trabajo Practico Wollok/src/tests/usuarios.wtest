import main.usuarios.*
import main.localidades.*
import main.viajes.*
import main.tiposDeUsuarios.*
import main.tiposDeLocalidades.*
import main.mediosDeTransporte.*

describe "Tests de PHari" {

	test "Ver que Pablo pueda viajar a Garlic's Sea" {
		assert.that(pHari.puedeViajar(viajeAGarlic))
	}
	
	test "Ver que Pablo se siga a si mismo"{
		pHari.seguirUsuario(pHari)
		assert.that(pHari.usuariosQueSigue().contains(pHari))
	}
}

describe "Ver viaje de Santiago usuario Empresarial a Miami"{
	
	method initialize(){
		santiago.viajarA(miami)
	}
	
	test "Ver dinero de Santiago luego de pagar su viaje"{
		assert.equals(597000,santiago.dinero())
	}
	
	test "Ver que los kilometros recorridos sean los del viaje"{
		assert.equals(300, santiago.kilometros())
	}
	
	test "Ver que la nueva ciudad de origen de Santiago sea Miami"{
		assert.equals(miami, santiago.localidadDeOrigen())
	}
	
	test "Ver que Santiago haya seleccionado el transporte mas rapido"{
		const viaje = santiago.viajes().get(0)
		assert.equals(avion, viaje.medioDeTransporte())
	}
	
	test "Ver que el viaje a Miami se haya agregado a la lista de viajes de Santiago"{
		assert.notThat(santiago.viajes().isEmpty())
	}
	
	test "Ver si santiago se puede cambiar de usuario a familiar"{
		santiago.cambiarTipoDeUsuario(familiar)
		assert.equals(familiar, santiago.tipoDeUsuario())
	}

}

describe "Test de Franco usuario Estudiantil al Everest"{
	
	method initialize(){
		franco.viajarA(everest)
	}
	
	test "Ver el dinero de Franco luego de pagar el viaje al Everest"{
		assert.equals(90000,franco.dinero())
	}
	
	test "Ver que los kilometros recorridos sean los del viaje"{
		assert.equals(150, franco.kilometros())
	}
	
	test "Ver que la nueva ciudad de origen de Franco sea el Everest"{
		assert.equals(everest, franco.localidadDeOrigen())
	}
	
	test "Ver que Franco haya seleccionado el transporte mas rapido dentro de lo que puede pagar"{
		//puede pagar el tren y el barco pero el tren tarda menos
		const viaje = franco.viajes().get(0)
		assert.equals(tren, viaje.medioDeTransporte())
	}
	
	test "Ver que el viaje al Everest se haya agregado a la lista de viajes de Franco"{
		assert.notThat(franco.viajes().isEmpty())
	}
	
	test "Ver si franco se puede cambiar de usuario a empresarial"{
		franco.cambiarTipoDeUsuario(empresarial)
		assert.equals(empresarial, franco.tipoDeUsuario())
	}
}

describe "Test de Pablo Hari y su viaje a Garlic's Sea"{
	
	method initialize(){
		pHari.comprarPasaje(viajeAGarlic)
		pHari.hacerViaje(viajeAGarlic)
		pHari.setLocalidadDeOrigen(viajeAGarlic.destino())
	}
	
	test "Pablo ahora tiene 100KM recorridos"{
		assert.equals(100, pHari.kilometros())
	}
	
	test "Pablo que queda sin plata luego de viajar a Garlic's Sea"{
		assert.equals(0, pHari.dinero())
	}
	
	test "Ver que el viaje a garlicSea este en la lista de viajes de pablo chequeando el origen del viaje"{
		const localidadOrigen = pHari.viajes().get(0).origen()
		assert.equals(goodAirs, localidadOrigen)
	}
	
	test "Ver que el viaje a garlicSea este en la lista de viajes de pablo chequeando el destino del viaje"{
		const localidadDestino = pHari.viajes().get(0).destino()
		assert.equals(garlicsSea, localidadDestino)
	}
	
	test "Ver que luego de viajar a Garlic Sea Pablo la tenga como localidad de origen"{
		assert.equals(garlicsSea, pHari.localidadDeOrigen())
	}
}

